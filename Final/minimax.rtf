{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import math\
 \
def minimax (curDepth, nodeIndex,\
             maxTurn, scores, \
             targetDepth):\
 \
    # base case : targetDepth reached\
    if (curDepth == targetDepth): \
        return scores[nodeIndex]\
     \
    if (maxTurn):\
        return max(minimax(curDepth + 1, nodeIndex * 2, \
                    False, scores, targetDepth), \
                   minimax(curDepth + 1, nodeIndex * 2 + 1, \
                    False, scores, targetDepth))\
     \
    else:\
        return min(minimax(curDepth + 1, nodeIndex * 2, \
                     True, scores, targetDepth), \
                   minimax(curDepth + 1, nodeIndex * 2 + 1, \
                     True, scores, targetDepth))\
     \
# Driver code\
scores = [3, 5, 2, 9, 12, 5, 23, 23]\
 \
treeDepth = math.log(len(scores), 2)\
 \
print("The optimal value is : ", end = "")\
print(minimax(0, 0, True, scores, treeDepth))}